services:
  snapit-client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: snapit-client
    env_file:
      - .env
      - ./client/.env
    networks:
      - proxy
      - server-net
    restart: unless-stopped
    environment:
      DOMAIN: ${DOMAIN}
      PROXY: ${PROXY}
    labels:
      - "traefik.enable=true"
      # HTTP router with redirect middleware to HTTPS
      - "traefik.http.routers.snapit-client-http.rule=Host(`app.${DOMAIN}`)"
      - "traefik.http.routers.snapit-client-http.entrypoints=http"
      - "traefik.http.routers.snapit-client-http.middlewares=https-redirect"
      - "traefik.http.routers.snapit-client-http.priority=100"
      # HTTPS router
      - "traefik.http.routers.snapit-client-https.rule=Host(`app.${DOMAIN}`)"
      - "traefik.http.routers.snapit-client-https.entrypoints=https"
      - "traefik.http.routers.snapit-client-https.tls=true"
      - "traefik.http.routers.snapit-client-https.tls.certresolver=le"
      - "traefik.http.routers.snapit-client-https.service=snapit-client-service"
      - "traefik.http.routers.snapit-client-https.priority=100"
      - "traefik.http.services.snapit-client-service.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
    # TODO: add healthcheck
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:3000"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5

  snapit-server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: snapit-server
    env_file:
      - .env
      - ./server/.env
    networks:
      - proxy
      - server-net
    restart: unless-stopped
    environment:
      DOMAIN: ${DOMAIN}
      PROXY: ${PROXY}
    depends_on:
      - postgres
      - redis
    labels:
      - "traefik.enable=true"
      # HTTP router with redirect middleware to HTTPS
      - "traefik.http.routers.snapit-server-http.rule=Host(`${DOMAIN}`) || Host(`api.${DOMAIN}`)"
      - "traefik.http.routers.snapit-server-http.entrypoints=http"
      - "traefik.http.routers.snapit-server-http.middlewares=https-redirect"
      # HTTPS router
      - "traefik.http.routers.snapit-server-https.rule=Host(`${DOMAIN}`) || Host(`api.${DOMAIN}`)"
      - "traefik.http.routers.snapit-server-https.entrypoints=https"
      - "traefik.http.routers.snapit-server-https.tls=true"
      - "traefik.http.routers.snapit-server-https.tls.certresolver=le"
      - "traefik.http.routers.snapit-server-https.service=snapit-server-service"
      - "traefik.http.services.snapit-server-service.loadbalancer.server.port=5000"
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
    # TODO: add healthcheck
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:5000"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5

  postgres:
    image: postgres:16
    container_name: snapit-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
      TZ: ${TZ}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
    networks:
      - server-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: snapit-redis
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - server-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  proxy:
    external: true
    name: ${PROXY}
  server-net:
    external: true
    name: ${SERVER_NET}

volumes:
  postgres_data:
  redis_data:
